trigger:
  batch: true
  branches:
    include: 
      - master

# pool:
#   vmImage: ubuntu-latest

# self-hosted agent, if exists
pool:
  name: Default
  demands:
   - agent.name -equals ubuntu-18-self-hosted-vm
   
pr:
  autoCancel: true
  
variables:
  - group: "Vision_SA_v2"
 
stages:
  - stage: Build
    jobs:
      - job: Build
        steps: 
          - bash: pip install -U iotedgedev
            displayName: 'Install iotedgedev into environment'
            
          - task: gittools.gittools.setup-gitversion-task.gitversion/setup@0
            displayName: 'Set GitVersion assembly'
            inputs:
              versionSpec: '5.x.x'
              updateAssemblyInfo: true

          - task: gittools.gittools.execute-gitversion-task.gitversion/execute@0
            displayName: 'Calculate version number'  
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)'
          
          - bash: sudo docker login $(ACR_ADDR) -u $(ACR_UNAME) -p $(ACR_PWD)
            displayName: 'Log into ACR' 

          - task: AzureIoTEdge@2
            inputs:
              action: 'Build module images'
              templateFilePath: "deployment.amd64_cpu.template.json"
              defaultPlatform: $(BUILD_PLATFORM)
            displayName: Build Edge modules
          - task: AzureIoTEdge@2
            inputs:
              action: 'Push module images'
              containerregistrytype: 'Azure Container Registry'
              azureSubscriptionEndpoint: $(AZURE_SERVICE_CONNECTION)
              azureContainerRegistry: '{"loginServer":"$(ACR_ADDR)", "id" : "/subscriptions/$(AZURE_SUBSCRIPTION_ID)/resourceGroups/$(RESOURCE_GROUP)/providers/Microsoft.ContainerRegistry/registries/$(ACR_UNAME)"}'
              templateFilePath: 'deployment.amd64_cpu.template.json'
              defaultPlatform: $(BUILD_PLATFORM)
              fillRegistryCredential: true
            displayName: Push Edge modules to ACR
        
          - script: |
              cp config/deployment.amd64_cpu.amd64.json $(Build.ArtifactStagingDirectory)
            displayName: Copy manifest to artifact directory
            
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: config

  - stage: Release
    jobs:
    - job: Release
      steps:
      # Download deployment manifest from build stage
      - download: current
        artifact: config

      # Deploy to all edge devices
      - task: AzureIoTEdge@2
        displayName: Create Deployment
        inputs:
          action: Deploy to IoT Edge devices
          deploymentFilePath: $(Pipeline.Workspace)/config/deployment.amd64_cpu.amd64.json
          azureSubscription: $(AZURE_SERVICE_CONNECTION)
          iothubname: $(IOT_HUB)
          # Your automatic configuration name, if used in IoT Hub
          # deploymentid: EDGE_OF_AI
          # priority: '10'
          # deviceOption: 'Single Device'
          deviceId: 'Edge_of_AI_AMD_v2'
